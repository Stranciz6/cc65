FEATURES {
    STARTADDRESS: default = $2E00;
}
MEMORY {
    ZP:     start = $0082, size = $007E, type = rw, define = yes;
    HEADER: start = $0000, size = $0006, file = %O;
    RAM:    start = %S,    size = $8E20, file = %O;	# $8E20: matches upper bound $BC1F for 
							# the default start address of $2E00
}
SEGMENTS {
    EXEHDR:   load = HEADER, type = ro;
    LOWCODE:  load = RAM,    type = ro, define = yes, optional = yes;
    INIT:     load = RAM,    type = ro,               optional = yes;
    CODE:     load = RAM,    type = ro;
    RODATA:   load = RAM,    type = ro;
    DATA:     load = RAM,    type = rw;
    BSS:      load = RAM,    type = bss, define = yes;
    HEAP:     load = RAM,    type = bss, optional = yes; # must sit just below stack
    ZEROPAGE: load = ZP,     type = zp;
    EXTZP:    load = ZP,     type = zp,               optional = yes;
    AUTOSTRT: load = RAM,    type = ro;
}
FEATURES {
    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}
SYMBOLS {
    __STACKSIZE__ = $800;	# 2K stack
}
