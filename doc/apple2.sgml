<!doctype linuxdoc system>

<article>

<title>Apple&nbsp;&rsqb;&lsqb; specific information for cc65
<author>Ullrich von Bassewitz, <htmlurl url="mailto:uz@cc65.org" name="uz@cc65.org">
<date>2003-12-16

<abstract>
An overview over the Apple&nbsp;&rsqb;&lsqb; runtime system as it is
implemented for the cc65 C compiler.
</abstract>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->

<sect>Overview<p>

This file contains an overview of the Apple&nbsp;&rsqb;&lsqb; runtime system
as it comes with the cc65 C compiler. It describes the memory layout,
Apple&nbsp;&rsqb;&lsqb; specific header files, available drivers, and any
pitfalls specific to that platform.

Please note that Apple&nbsp;&rsqb;&lsqb; specific functions are just mentioned
here, they are described in detail in the separate <htmlurl url="funcref.html"
name="function reference">. Even functions marked as "platform dependent" may
be available on more than one platform. Please see the function reference for
more information.



<sect>Binary format<p>

The standard binary output format generated by the linker for the
Apple&nbsp;&rsqb;&lsqb; target is a machine language program with a 4 byte DOS
3.3 header. The standard load address is &dollar;800.

The DOS header is in its own segment named <tt/EXEHDR/. If you don't want the
header for some reason, you can change

<verb>
    HEADER: start = $0000, size = $4, file = %O;
</verb>

to

<verb>
    HEADER: start = $0000, size = $4, file = "";
</verb>

in the linker configuration to have the linker remove it.

Please note that there is a "Apple&nbsp;&rsqb;&lsqb; ProDOS 8 system program
for loading binary programs" available in the cc65 User Contributions section.
It adds all benefits of a ProDOS 8 system program to the standard binary
program generated by the linker for the Apple&nbsp;&rsqb;&lsqb; target.



<sect>Memory layout<p>

In the standard setup, cc65 generated programs use the memory from
&dollar;800 to &dollar;95FF, so 35.5K of memory are available. ROM calls are
possible without further precautions.

Special locations:

<descrip>
  <tag/Stack/
  The C runtime stack is located at HIMEM and grows downwards, regardless of
  how your linker config file is setup.

  <tag/Heap/
  The C heap is located at the end of the program and grows towards the C
  runtime stack.
</descrip><p>



<sect>Platform specific header files<p>

Programs containing Apple&nbsp;&rsqb;&lsqb; specific code may use the
<tt/apple2.h/ header file.


<sect1>Apple&nbsp;&rsqb;&lsqb; specific functions<p>

The functions listed below are special for the Apple&nbsp;&rsqb;&lsqb;. See
the <htmlurl url="funcref.html" name="function reference"> for declaration and
usage.

<itemize>
<item>_dos_type
<item>get_ostype
</itemize>


<sect1>Hardware access<p>

There's currently no support for direct hardware access. This does not mean
you cannot do it, it just means that there's no help.



<sect>Loadable drivers<p>


<sect1>Graphics drivers<p>

<descrip>

  <tag><tt/a2.lo.tgi/</tag>
  This driver was written by Stefan Haubenthal. It features a resolution of
  40&times;40 with 16 colors. At the bottom of the screen, 4 additional text
  lines are available.

  <tag><tt/a2.hi.tgi/</tag>
  This driver was written by Stefan Haubenthal. It features a resolution of
  280&times;192 with 6 colors. Note that programs using this driver will have
  to be linked with <tt/--start-addr $4000/ to reserve the first hires page.

</descrip><p>


<sect1>Extended memory drivers<p>

<descrip>

  <tag><tt/a2.lc.emd/</tag>
  Gives access to 12KB RAM (48 pages of 256 bytes each) on the
  Apple&nbsp;II Language Card. The driver was contributed by Stefan Haubenthal.
  Note that this driver is incompatible with any DOS using the Language
  Card memory!

</descrip><p>


<sect1>Joystick drivers<p>

<descrip>

  <tag><tt/a2.stdjoy.joy/</tag>
  Supports up to two standard analog joysticks connected to the game port of
  the Apple&nbsp;&rsqb;&lsqb;.

</descrip><p>


<sect1>Mouse drivers<p>

<descrip>

  <tag><tt/a2.stdmou.mou/</tag>
  Driver for the AppleMouse&nbsp;II Card. Searches all Apple&nbsp;II slots
  for an AppleMouse&nbsp;II Card compatible firmware. The default bounding
  box is &lsqb;0..279,0..191&rsqb;. Programs using this driver will have
  to be linked with <tt/--start-addr $4000/ to reserve the first hires page
  if they are intended to run on an Apple&nbsp;&rsqb;&lsqb; (in contrast to
  an Apple&nbsp;//e).

  Note that the Apple&nbsp;&rsqb;&lsqb; default mouse callbacks support text
  mode only.

</descrip><p>


<sect1>RS232 device drivers<p>

<descrip>

  <tag><tt/a2.ssc.ser/</tag>
  Driver for the Apple&nbsp;II Super Serial Card. Supports up to 19200 baud,
  hardware flow control (RTS/CTS) and interrupt driven receives. Note
  that because of the peculiarities of the 6551 chip transmits are not
  interrupt driven, and the transceiver blocks if the receiver asserts
  flow control because of a full buffer.

  The driver defaults to slot 2. Call <tt/ser_ioctl(0, &lt;slot&gt;)/ prior to
  <tt/ser_open/ in order to select a different slot. <tt/ser_ioctl/ succeeds
  for all Apple&nbsp;II slots, but <tt/ser_open/ fails with
  <tt/SER_ERR_NO_DEVICE/ if there's no SSC firmware found in the selected slot.

</descrip><p>



<sect>Limitations<p>



<sect>Other hints<p>


<sect1>Passing arguments to the program<p>

Command line arguments can be passed to <tt/main()/ after BLOAD. Since this is not
supported by BASIC, the following syntax was chosen:

<tscreen><verb>
]CALL2048:REM ARG1 " ARG2 IS QUOTED" ARG3 "" ARG5
</verb></tscreen>

<enum>
<item>Arguments are separated by spaces.
<item>Arguments may be quoted.
<item>Leading and trailing spaces around an argument are ignored. Spaces within
      a quoted argument are allowed.
<item>The first argument passed to <tt/main/ is the program name.
<item>A maximum number of 10 arguments (including the program name) are
      supported.
</enum>


<sect1>Interrupts<p>

The runtime for the Apple&nbsp;&rsqb;&lsqb; uses routines marked as <tt/.CONDES/
type 2 for ProDOS interrupt handlers. Such routines must be written as simple
machine language subroutines and will be called automatically by the interrupt
handler code when they are linked into a program. See the discussion of the
<tt/.CONDES/ feature in the <htmlurl url="ca65.html" name="assembler manual">.



<sect>Bugs/Feedback<p>

If you have problems using the library, if you find any bugs, or if you're
doing something interesting with it, I would be glad to hear from you. Feel
free to contact me by email (<htmlurl url="mailto:uz@cc65.org"
name="uz@cc65.org">).



<sect>License<p>

This software is provided 'as-is', without any expressed or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

<enum>
<item>	The origin of this software must not be misrepresented; you must not
	claim that you wrote the original software. If you use this software
	in a product, an acknowledgment in the product documentation would be
	appreciated but is not required.
<item>	Altered source versions must be plainly marked as such, and must not
	be misrepresented as being the original software.
<item>	This notice may not be removed or altered from any source
	distribution.
</enum>

</article>
