

   	   Description of the C library for the cc65 C compiler

	      (C) Copyright 1998-1999 Ullrich von Bassewitz
   			    (uz@musoftware.de)



Contents
--------

  1. Overview

  2. ISO C compatible library

  3. CPU specific stuff - 6502.h

  4. System specific stuff

  5. Direct console I/O - conio.h

  6. Using the joystick - joystick.h

  7. Bugs/Feedback

  8. Copyright



1. Overview
-----------

This file contains a description of the library routines available for the
cc65 C compiler. It is not complete in some areas, so if you miss
something, have a look into the header files. All functions, that are not
defined by the ISO C standard have a short comment in the headers,
explaining their use.



2. ISO C compatible library
---------------------------

The C library contains a large subset of the ISO C library. Functions are
usually missing in areas, where there is no support on typical 6502
systems. Wide character sets are an example for this.

I will not go into detail about the ISO functions. If a function is not
mentioned here explicitly, expect it to be available and to behave as
defined in the C standard.


Functions that are NOT available:

  * ftell/fseek/fgetpos/fsetpos

  * tmpfile/tmpnam

  * The scanf family of functions

  * time/asctime/ctime/difftime/asctime/gmtime/localtime/mktime/strftime

  * system

  * All functions that handle floating point numbers in some manner.

  * The div and ldiv functions (because cc65 is not able to return
    structs).

  * All functions handling wide character strings.

  * Signals and all related functions (having SIGSEGV would be cool:-)

  * rename/remove/rewind

  * setbuf/setvbuf/ungetc



Functions that are limited in any way:

  * fopen/fread/fwrite/fclose/fputs/fgets/fscanf....

    These functions are built on open/read/write/close. Neither of these
    low level functions is currently available for the supported systems,
    and so, fopen and friends do not work. However, the functions exist
    and are tested to some degree under the ACE operating systems (which
    is no longer supported).


  * The va_... family of macros

    The macros do not work completely as defined by the standard. Since cc65
    has the wrong calling order, the (non-standard) va_fix macro must be used
    to access fixed parameters in functions with a variable parameter size.
    See newvers.txt for a discussion of the problem.


  * strcspn/strpbrk/strspn

    These functions have a length limitation of 256 for the second string
    argument. Since this string gives a character set, and there are only 256
    distinct characters, this shouldn't be a problem.


  * Since there is no such thing as an environment on all supported
    systems, the getenv function will always return a NULL pointer.


  * There is no other locale than the "C" locale. The native locale is
    identical to the "C" locale.


In addition to these limitations, some more functions are limited if inlined
versions are requested by using -Os:

  * The strlen function only works for strings with a maximum length of
    255 characters.

  * The isxxx character classification functions from <ctype.h> will give
    unpredictable results if the argument is not in character range
    (0..255). This limitation may be removed by #undef'ing the function
    name (when using -Os, the functions are actually macros that expand to
    inline assembler code, but the real functions are still available if
    the macro definition is removed).



3. CPU specific stuff - 6502.h
------------------------------

The header file 6502.h contains some functions that make only sense with
the 6502 CPU. Examples are macros to insert more or less useful
instructions into your C code, or a function to call arbitrary machine
language subroutines, passing registers in and out.



4. System specific stuff
------------------------

For each supported system there's a header file that contains calls or
defines specific for this system. So, when programming for the C64,
include c64.h, for the C128, include c128.h and so on. To make the task
for the Commodore systems easier, there is also a header file named cbm.h
that will define stuff common for all CBM systems, and include the header
file for the specific target system.

The header files contain

  * Defines for special keys (like function keys)

  * Defines for special characters (like the graphics characters)

  * Variables with a fixed address in memory that may be used to access
    special hardware. For the C64 and C128 there is a variable struct
    named "sid". Writing to the fields of this struct will write to the
    SID device instead. Using these variables will make your program more
    readable and more portable. Don't fear ineffective code when using
    these variables, the compiler will translate reads and writes to these
    structs into direct memory accesses.

  * Other routines that make only sense for a specific system. One example
    are routines to write memory locations in the system bank for the CBM
    600/700 family (called B128/B256 in the US).



5. Direct console I/O - conio.h
-------------------------------

The conio header file contains a large set of functions that do screen and
keyboard I/O. The functions will write directly to the screen or poll the
keyboard directly with no more help from the operating system than needed.
This has some disadvantages, but on the other side it's fast and
reasonably portable. conio implementations exist for the following
targets:

	c64
	c128
	plus/4
	cbm610		(that is, the complete 600/700 series)
	pet		(all PETs except the 2001)
	apple 2

The conio.h header file does also include the system specific header files
which define constants for special characters and keys.



6. Using the joystick - joystick.h
----------------------------------

For systems that have a joystick, joystick.h will define a subroutine to
read the current value, including constants to evaluate the result of this
function. To help in writing portable code, the header file will define
the symbol __JOYSTICK__ on systems that have a joystick.



7. Bugs/Feedback
----------------

If you have problems using the library, if you find any bugs, or if you've
written some extensions or otherwise interesting programs, I would be glad
to hear from you. Feel free to contact me by email (uz@musoftware.de).



8. Copyright
------------

This C runtime library implementation for the cc65 compiler is (C)
Copyright 1998-1999 Ullrich von Bassewitz. For usage of the binaries
and/or sources the following conditions do apply:

This software is provided 'as-is', without any expressed or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
   claim that you wrote the original software. If you use this software
   in a product, an acknowledgment in the product documentation would be
   appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not
   be misrepresented as being the original software.
3. This notice may not be removed or altered from any source
   distribution.





